/*
 * Copyright (c) 2020 Eric Lau
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWRT 0
#define LWR 1
#define RSE 2


/ {
        keymap {
                compatible = "zmk,keymap";

                qwerty_layer {
// -----------------------------------------------------------------------------------------
// | GRESC |  1  |  2  |  3  |  4  |  5  |      |  6  |  7  |  8   |  9  |  O  | BKSP |
// |  TAB  |  Q  |  W  |  E  |  R  |  T  |      |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL  |  A  |  S  |  D  |  F  |  G  |      |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT  |  Z  |  X  |  C  |  V  |  B  |      |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                     | GUI | LWR | SPC |      | ENT | RSE  | GUI | 
// | LEFT ENCODER |                                                   | RIGHT ENCODER |





			// RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)  RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(0,12) RC(0,13) RC(0,14)
			// RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)  RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) RC(1,12) RC(1,13) RC(1,14)
			// RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)  RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12) RC(2,13) RC(2,14)
			// RC(3,0)         RC(3,2) RC(3,3) RC(3,4) RC(3,5)  RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) RC(3,12) RC(3,13) RC(3,14)
			// RC(4,0) RC(4,1) RC(4,2)                 RC(4,5)                  RC(4,8) RC(4,9) RC(4,10)          RC(4,12) RC(4,13) RC(4,14)

                        bindings = <
   &gresc    &kp N1   &kp N2   &kp N3   &kp N4  &kp N5    &kp N6   &kp N7  &kp N8   &kp N9    &kp N0   &kp MINUS &kp EQUAL &kp BSPC  &kp TILDE
   &kp TAB   &kp Q    &kp W    &kp E    &kp R   &kp T     &kp Y    &kp U   &kp I    &kp O     &kp P    &kp LBRC  &kp RBRC  &kp BSLH  &kp DEL
   &kp CAPS  &kp A    &kp S    &kp D    &kp F   &kp G     &kp H    &kp J   &kp K    &kp L     &kp SEMI &kp SQT   &kp BSLH  &kp ENTER &kp PAGE_UP
   &kp LSHFT          &kp Z    &kp X    &kp C   &kp V     &kp B    &kp N   &kp M    &kp COMMA &kp DOT  &kp FSLH  &kp RSHFT &kp UP    &kp PAGE_DOWN
   &kp LCTRL &kp LGUI &kp LALT                  &kp SPACE                  &kp RALT &mo RSE   &kp RCTRL          &kp LEFT  &kp DOWN  &kp RIGHT     
                        >;
                };
       
                
//                 lower_layer {
// // -----------------------------------------------------------------------------------------
// // | GRESC |      |     |      |       |     |         |        |      |       |       |     |      |
// // |       |      |     |      |       |     |         | LEFT   | DOWN |  UP   | RIGHT |     |      |
// // | REDO  | UNDO | CUT | COPY | PASTE |     |         |        |      |       |       |     |      |
// // |       |      |     |      |       |     |         | BT_CLR | BT_0 | BT_1  | BT_2 | BT_3 | BT_4 |
// //                      | RST  | BOOT  | DEL |         | BKSP   | COLE | QWRT  |
// // | LEFT ENCODER |                                                                 | RIGHT ENCODER |
//                         bindings = <
//    &gresc        &trans     &trans    &trans    &trans      &trans            &trans     &trans       &trans       &trans       &trans       &trans
//    &trans        &trans     &trans    &trans    &trans      &trans            &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT    &trans       &trans
//    &kp LG(LS(Z)) &kp LG(Z)  &kp LG(X) &kp LG(C) &kp LG(V)   &trans            &trans     &kp LEFT     &kp DOWN     &kp RIGHT    &trans       &trans
//    &kp LSHFT     &trans     &trans    &trans    &trans      &trans            &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 
//                                       &reset    &bootloader &kp DEL           &kp BSPC   &to COLE     &to QWRT   
//    &trans                                                                                                                                    &trans
//                         >;
//                 };

//                 raise_layer {
// // -----------------------------------------------------------------------------------------
// // |GRESC |       |       |       |       |       |               |       |       |       |       |       |       |
// // |      |       |       |       |       |       |               |       |       |       |       |       |       |
// // |      |       |       |       |       |       |               |       |       |       |       |       |       |
// // |      |       |       |       |       |       |               |       |       |       |       |       |       |
// //                        |  RST  |  BOOT |       |               |       |       |       |
// // | LEFT ENCODER |                                                                               | RIGHT ENCODER |
//                         bindings = <
//    &gresc       &kp N1   &trans   &trans   &trans      &trans            &trans   &trans   &trans   &trans   &trans   &trans
//    &trans       &trans   &trans   &trans   &trans      &trans            &trans   &trans   &trans   &trans   &trans   &trans
//    &trans       &trans   &trans   &trans   &trans      &trans            &trans   &trans   &trans   &trans   &trans   &trans
//    &trans       &trans   &trans   &trans   &trans      &trans            &trans   &trans   &trans   &trans   &trans   &trans
//                                   &reset   &bootloader &trans            &trans   &trans   &trans   
//    &trans                                                                                                             &trans
//                         >;
//                 };
        };
};
